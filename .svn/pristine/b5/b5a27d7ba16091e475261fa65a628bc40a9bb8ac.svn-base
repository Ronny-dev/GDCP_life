package com.example.ronny_xie.gdcp.Fragment.jw2012SyetemFragment.adapter;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.example.ronny_xie.gdcp.Fragment.jw2012SyetemFragment.bean.NewsItem;
import com.example.ronny_xie.gdcp.R;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import static com.example.ronny_xie.gdcp.R.id.img;

public class jw_main_adapter extends BaseAdapter {

    private ArrayList<NewsItem> newsItems;
    private Context context;
    private int picType;
    private Handler handler = new Handler();
    private int position;

    public jw_main_adapter(ArrayList<NewsItem> newsItems, Context context) {
        this.newsItems = newsItems;
        this.context = context;
    }

    @Override
    public int getCount() {
        return newsItems == null ? 0 : newsItems.size();
    }

    @Override
    public NewsItem getItem(int position) {
        return newsItems.get(position);
    }

    @Override
    public long getItemId(int position) {
        this.position = position;
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final ViewHolder holder;
        if (convertView == null) {
            holder = new ViewHolder();
            convertView = LayoutInflater.from(context).inflate(R.layout.adapter_jw_news, parent, false);
            holder.img = (ImageView) convertView.findViewById(img);
            holder.tvTitle = (TextView) convertView.findViewById(R.id.tv_title);
            holder.tvSource = (TextView) convertView.findViewById(R.id.tv_source);
            holder.tvDate = (TextView) convertView.findViewById(R.id.tv_date);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        final String url = newsItems.get(position).getImg();
        if (url != null) {
            new Thread() {
                @Override
                public void run() {
                    Bitmap bitMBitmap = getBitMBitmap(url);
                    getPicTypeByUrl(url);
                    Bitmap bitmap = compressImage(bitMBitmap);
                    final Bitmap comp = comp(bitmap);
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            holder.img.setImageBitmap(comp);
                        }
                    });
                }
            }.start();
        }else{
            holder.img.setImageResource(R.drawable.ic_launcher);
            //Glide.with(context).load(url == null ? newsItems.get(3).getImg() : url).into(holder.img);
        }
        holder.tvTitle.setText(newsItems.get(position).getTitle());
        holder.tvSource.setText(newsItems.get(position).getSource());
        holder.tvDate.setText(newsItems.get(position).getDate());
        return convertView;
    }

    class ViewHolder {
        ImageView img;
        TextView tvTitle;
        TextView tvSource;
        TextView tvDate;
    }

    /**
     * 质量压缩
     */
    public Bitmap compressImage(Bitmap image) {
        if (image != null) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            Bitmap.CompressFormat Type = picType == 0 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;
            //image.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
            image.compress(Type, 100, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
            int options = 100;
            while (baos.toByteArray().length / 1024 > 100) {  //循环判断如果压缩后图片是否大于100kb,大于继续压缩
                baos.reset();//重置baos即清空baos
                image.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中
                options -= 10;//每次都减少10
            }
            ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());//把压缩后的数据baos存放到ByteArrayInputStream中
            Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);//把ByteArrayInputStream数据生成图片
            return bitmap;
        }else{
            return getBitMBitmap(newsItems.get(position).getUrl());
        }
    }

    /**
     * 图片按比例大小压缩方法（根据Bitmap图片压缩）
     */
    public Bitmap comp(Bitmap image) {
        if (image != null){
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.JPEG, 100, baos);
            if (baos.toByteArray().length / 1024 > 1024) {//判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出
                baos.reset();//重置baos即清空baos
                Bitmap.CompressFormat Type = picType == 0 ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;
                //image.compress(Bitmap.CompressFormat.JPEG, 50, baos);//这里压缩50%，把压缩后的数据存放到baos中
                image.compress(Type, 50, baos);//这里压缩50%，把压缩后的数据存放到baos中
            }
            ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());
            BitmapFactory.Options newOpts = new BitmapFactory.Options();
            //开始读入图片，此时把options.inJustDecodeBounds 设回true了
            newOpts.inJustDecodeBounds = true;
            Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
            newOpts.inJustDecodeBounds = false;
            int w = newOpts.outWidth;
            int h = newOpts.outHeight;
            //现在主流手机比较多是800*480分辨率，所以高和宽我们设置为
            float hh = 800f;//这里设置高度为800f
            float ww = 480f;//这里设置宽度为480f
            //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可
            int be = 1;//be=1表示不缩放
            if (w > h && w > ww) {//如果宽度大的话根据宽度固定大小缩放
                be = (int) (newOpts.outWidth / ww);
            } else if (w < h && h > hh) {//如果高度高的话根据宽度固定大小缩放
                be = (int) (newOpts.outHeight / hh);
            }
            if (be <= 0)
                be = 1;
            newOpts.inSampleSize = be;//设置缩放比例
            //重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
            isBm = new ByteArrayInputStream(baos.toByteArray());
            bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
            return compressImage(bitmap);//压缩好比例大小后再进行质量压缩
        }else{
            return getBitMBitmap(newsItems.get(position).getUrl());
        }
    }

    /**
     * 判断图片类型
     */
    public void getPicTypeByUrl(String url) {
        if (url == null) {
            return;
        }
        if (url.equals("")) {
            return;
        }
        String[] picArray = url.split("/");
        String picStr = "";
        if (picArray.length > 0) {
            picStr = picArray[picArray.length - 1];
        } else {
            picStr = picArray[0];
        }
        if (picStr.toLowerCase().contains(".png")) {
            picType = 0;
        } else if (picStr.toLowerCase().contains(".jpg") || picStr.toLowerCase().contains(".jpeg")) {
            picType = 1;
        }
    }

    /**
     * 通过图片url生成Bitmap对象
     *
     * @param urlpath
     * @return Bitmap
     * 根据图片url获取图片对象
     */
    public static Bitmap getBitMBitmap(String urlpath) {
        Bitmap map = null;
        try {
            URL url = new URL(urlpath);
            URLConnection conn = url.openConnection();
            conn.connect();
            InputStream in;
            in = conn.getInputStream();
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = 8;
            options.inPreferredConfig = Bitmap.Config.RGB_565;
            map = BitmapFactory.decodeStream(in, null, options);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return map;
    }
}

